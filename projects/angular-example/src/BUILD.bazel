package(default_visibility = ["//visibility:public"])

load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_devserver")

ng_module(
    name = "src",
    srcs = glob(["*.ts"]),
    assets = [
        ":app.component.html",
    ],
    tsconfig = "//:tsconfig.json",
    deps = [
        "//projects/angular-example/src/hello-world",
        "//projects/angular-example/src/todos",
        "@angular//packages/core",
        "@angular//packages/router",
    ],
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = [
        "angular_bazel_example/node_modules/zone.js/dist",
        "angular_bazel_example/node_modules/tslib",
        "angular_bazel_example/node_modules/@ngrx/store/bundles",
    ],
    # Start from the development version of the main
    entry_module = "mono/projects/angular-example/src/main.dev",
    scripts = [
        ":require.config.js",
    ],
    # This is the URL we'll point our <script> tag at
    serving_path = "/bundle.min.js",
    # Serve these files in addition to the JavaScript bundle
    static_files = [
        "//:node_modules/zone.js/dist/zone.min.js",
        "//:node_modules/tslib/tslib.js",
        "//:node_modules/@ngrx/store/bundles/store.umd.min.js",
        "index.html",
    ],
    # Tell Bazel to build the sources first
    deps = ["//projects/angular-example/src"],
)

load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary", "rollup_bundle")

rollup_bundle(
    name = "bundle",
    # These Angular routes may be lazy-loaded at runtime.
    # So we tell Rollup that it can put them in separate JS chunks
    # (code-splitting) for faster application startup.
    # In the future, we could automatically gather these from statically
    # analyzing the Angular sources.
    additional_entry_points = [
        "projects/angular-example/src/hello-world/hello-world.module.ngfactory",
        "projects/angular-example/src/todos/todos.module.ngfactory",
    ],
    entry_point = "projects/angular-example/src/main",
    node_modules = "//:node_modules",
    deps = ["//projects/angular-example/src"],
)

# Copy zone.min.js to this package.
# Needed because the prodserver only loads static files that appear under this
# package.
genrule(
    name = "copy_zonejs",
    srcs = ["//:node_modules/zone.js/dist/zone.min.js"],
    outs = ["zone.min.js"],
    cmd = "cp $< $@",
)

# See comment for zonejs above
genrule(
    name = "copy_systemjs",
    srcs = ["//:node_modules/systemjs/dist/system.js"],
    outs = ["system.js"],
    cmd = "cp $< $@",
)

load("@build_bazel_rules_nodejs//:defs.bzl", "history_server")

history_server(
    name = "prodserver",
    data = [
        "index.html",
        ":bundle",
        ":copy_systemjs",
        ":copy_zonejs",
    ],
)
