// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LMS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type List struct {
	_tab flatbuffers.Table
}

func GetRootAsList(buf []byte, offset flatbuffers.UOffsetT) *List {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &List{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *List) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *List) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *List) ListId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *List) OrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *List) RegionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *List) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *List) Deleted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *List) MutateDeleted(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *List) Labels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *List) LabelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ListStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ListAddListId(builder *flatbuffers.Builder, listId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(listId), 0)
}
func ListAddOrgId(builder *flatbuffers.Builder, orgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(orgId), 0)
}
func ListAddRegionId(builder *flatbuffers.Builder, regionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(regionId), 0)
}
func ListAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func ListAddDeleted(builder *flatbuffers.Builder, deleted bool) {
	builder.PrependBoolSlot(4, deleted, false)
}
func ListAddLabels(builder *flatbuffers.Builder, labels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(labels), 0)
}
func ListStartLabelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
