// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LMS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RecordField struct {
	_tab flatbuffers.Table
}

func GetRootAsRecordField(buf []byte, offset flatbuffers.UOffsetT) *RecordField {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RecordField{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RecordField) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RecordField) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RecordField) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RecordField) PaylodType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RecordField) MutatePaylodType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *RecordField) Paylod(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RecordFieldStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RecordFieldAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func RecordFieldAddPaylodType(builder *flatbuffers.Builder, paylodType byte) {
	builder.PrependByteSlot(1, paylodType, 0)
}
func RecordFieldAddPaylod(builder *flatbuffers.Builder, paylod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(paylod), 0)
}
func RecordFieldEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
